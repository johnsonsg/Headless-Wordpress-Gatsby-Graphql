{"version":3,"sources":["../../../src/steps/create-schema-customization/index.js"],"names":["customizeSchema","actions","schema","state","store","getState","gatsbyApi","pluginOptions","remoteSchema","fieldAliases","fieldBlacklist","ingestibles","nonNodeRootFields","typeDefs","gatsbyNodeTypes","typeBuilderApi","introspectionData","__schema","types","forEach","type","typeName","name","kind","buildType","unionType","interfaceType","objectType","enumType","typePrefix","description","fields","interfaces","isAGatsbyNode","createTypes","createSchemaCustomization","api","e","reporter","panic"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;;AAGA,MAAMA,eAAe,GAAG,OAAO;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAP,KAA+B;AACrD,QAAMC,KAAK,GAAGC,eAAMC,QAAN,EAAd;;AAEA,QAAM;AACJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KADP;AAEJC,IAAAA;AAFI,MAGFL,KAHJ;AAKA,QAAM;AACJM,IAAAA,YADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AAHT,MAIFJ,YAJJ;AAMA,QAAMK,QAAQ,GAAG,EAAjB;AAEA,QAAMC,eAAe,GAAG,yCAAxB;AAEA,QAAMC,cAAc,GAAG;AACrBF,IAAAA,QADqB;AAErBX,IAAAA,MAFqB;AAGrBY,IAAAA,eAHqB;AAIrBL,IAAAA,YAJqB;AAKrBC,IAAAA,cALqB;AAMrBH,IAAAA;AANqB,GAAvB,CAlBqD,CA2BrD;;AACAC,EAAAA,YAAY,CAACQ,iBAAb,CAA+BC,QAA/B,CAAwCC,KAAxC,CAA8CC,OAA9C,CAAuDC,IAAD,IAAU;AAC9D,QACE,oCAAsBA,IAAtB,KACA,CAAC,gCAAe;AAAEb,MAAAA,aAAF;AAAiBc,MAAAA,QAAQ,EAAED,IAAI,CAACE;AAAhC,KAAf,CAFH,EAGE;AACA,cAAQF,IAAI,CAACG,IAAb;AACE,aAAM,OAAN;AACEC,8BAAUC,SAAV,CAAoB,EAAE,GAAGV,cAAL;AAAqBK,YAAAA;AAArB,WAApB;;AACA;;AACF,aAAM,WAAN;AACEI,8BAAUE,aAAV,CAAwB,EAAE,GAAGX,cAAL;AAAqBK,YAAAA;AAArB,WAAxB;;AACA;;AACF,aAAM,QAAN;AACEI,8BAAUG,UAAV,CAAqB,EAAE,GAAGZ,cAAL;AAAqBK,YAAAA;AAArB,WAArB;;AACA;;AACF,aAAM,MAAN;AACEI,8BAAUI,QAAV,CAAmB,EAAE,GAAGb,cAAL;AAAqBK,YAAAA;AAArB,WAAnB;;AACA;;AACF,aAAM,QAAN;AACE;;;;AAIA;AAlBJ;AAoBD;AACF,GA1BD,EA5BqD,CAwDrD;AACA;AACA;AACA;;;AACAI,sBAAUG,UAAV,CAAqB,EACnB,GAAGZ,cADgB;AAEnBK,IAAAA,IAAI,EAAE;AACJG,MAAAA,IAAI,EAAG,QADH;AAEJD,MAAAA,IAAI,EAAEf,aAAa,CAACL,MAAd,CAAqB2B,UAFvB;AAGJC,MAAAA,WAAW,EAAG,iCAHV;AAIJC,MAAAA,MAAM,EAAEnB,iBAJJ;AAKJoB,MAAAA,UAAU,EAAE,CAAE,MAAF;AALR,KAFa;AASnBC,IAAAA,aAAa,EAAE;AATI,GAArB;;AAYAhC,EAAAA,OAAO,CAACiC,WAAR,CAAoBrB,QAApB;AACD,CAzED;;AA2EA,MAAMsB,yBAAyB,GAAG,MAAOC,GAAP,IAAe;AAC/C,MAAI;AACF,UAAMpC,eAAe,CAACoC,GAAD,CAArB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVD,IAAAA,GAAG,CAACE,QAAJ,CAAaC,KAAb,CAAmBF,CAAnB;AACD;AACF,CAND","sourcesContent":["import store from \"~/store\"\n\nimport { fieldOfTypeWasFetched } from \"./helpers\"\n\nimport buildType from \"./build-types\"\nimport { getGatsbyNodeTypeNames } from \"../source-nodes/fetch-nodes/fetch-nodes\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\n\n/**\n * createSchemaCustomization\n */\nconst customizeSchema = async ({ actions, schema }) => {\n  const state = store.getState()\n\n  const {\n    gatsbyApi: { pluginOptions },\n    remoteSchema,\n  } = state\n\n  const {\n    fieldAliases,\n    fieldBlacklist,\n    ingestibles: { nonNodeRootFields },\n  } = remoteSchema\n\n  const typeDefs = []\n\n  const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n  const typeBuilderApi = {\n    typeDefs,\n    schema,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n    pluginOptions,\n  }\n\n  // create Gatsby node types\n  remoteSchema.introspectionData.__schema.types.forEach((type) => {\n    if (\n      fieldOfTypeWasFetched(type) &&\n      !typeIsExcluded({ pluginOptions, typeName: type.name })\n    ) {\n      switch (type.kind) {\n        case `UNION`:\n          buildType.unionType({ ...typeBuilderApi, type })\n          break\n        case `INTERFACE`:\n          buildType.interfaceType({ ...typeBuilderApi, type })\n          break\n        case `OBJECT`:\n          buildType.objectType({ ...typeBuilderApi, type })\n          break\n        case `ENUM`:\n          buildType.enumType({ ...typeBuilderApi, type })\n          break\n        case `SCALAR`:\n          /**\n           * custom scalar types aren't imlemented currently.\n           *  @todo make this hookable so sub-plugins or plugin options can add custom scalar support.\n           */\n          break\n      }\n    }\n  })\n\n  // Create non Gatsby node types by creating a single node\n  // where the typename is the type prefix\n  // The node fields are the non-node root fields of the remote schema\n  // like so: query { prefix { ...fields } }\n  buildType.objectType({\n    ...typeBuilderApi,\n    type: {\n      kind: `OBJECT`,\n      name: pluginOptions.schema.typePrefix,\n      description: `Non-node WPGraphQL root fields.`,\n      fields: nonNodeRootFields,\n      interfaces: [`Node`],\n    },\n    isAGatsbyNode: true,\n  })\n\n  actions.createTypes(typeDefs)\n}\n\nconst createSchemaCustomization = async (api) => {\n  try {\n    await customizeSchema(api)\n  } catch (e) {\n    api.reporter.panic(e)\n  }\n}\n\nexport { createSchemaCustomization }\n"],"file":"index.js"}