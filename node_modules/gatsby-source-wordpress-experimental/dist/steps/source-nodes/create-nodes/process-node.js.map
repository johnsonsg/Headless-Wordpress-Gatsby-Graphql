{"version":3,"sources":["../../../../src/steps/source-nodes/create-nodes/process-node.js"],"names":["getNodeEditLink","node","protocol","hostname","url","parse","link","editUrl","databaseId","findReferencedImageNodeIds","nodeString","pluginOptions","type","MediaItem","lazyNodes","matchedIds","map","match","subMatches","filter","id","getCheerioImgDbId","cheerioImg","dataAttributeId","attribs","class","wpImageClass","split","find","className","includes","wpImageClassDashArray","wpImageClassId","Number","length","dbIdToMediaItemRelayId","dbId","getCheerioImgRelayId","ensureSrcHasHostname","src","wpUrl","host","startsWith","pickNodeBySourceUrlOrCheerioImg","mediaItemNodes","possibleHtmlSrcs","imageNode","mediaItemNode","sourceUrl","mediaItemUrl","replace","displayedFailedToRestoreMessage","fetchNodeHtmlImageMediaItemNodes","cheerioImages","helpers","nodeMetaByUrl","store","getState","imageNodes","previouslyCachedNodesByUrl","Promise","all","Object","entries","existingNode","getNode","reporter","warn","Boolean","mediaItemUrls","mediaItemNodesBySourceUrl","mediaItemDbIds","mediaItemRelayIds","relayId","mediaItemNodesById","referencedMediaItemNodeIds","createdNodes","htmlMatchesToMediaItemNodesMap","Map","htmlImgSrc","skipExistingNode","parentName","modifiedGmt","mimeType","title","fileSize","parentHtmlNode","e","sharedError","__typename","nodeEditLink","log","panic","cacheCreatedFileNodeBySrc","set","getCheerioElementFromMatch","tag","parsedMatch","JSON","$","cheerio","load","xml","withDomLvl1","normalizeWhitespace","xmlMode","decodeEntities","cheerioElement","getLargestSizeFromSizesAttribute","sizesString","sizesStringsArray","reduce","largest","currentSizeString","maxWidth","substring","indexOf","trim","maxWidthNumber","noLargestAndMaxWidthIsANumber","isNaN","maxWidthIsALargerNumberThanLargest","findImgTagMaxWidthFromCheerioImg","width","sizes","widthNumber","largestSize","getFileNodeRelativePathname","fileNode","fileName","internal","contentDigest","base","getFileNodePublicPath","publicPath","path","join","process","cwd","copyFileToStaticAndReturnUrlPath","fs","existsSync","copy","absolutePath","dereference","err","console","error","relativeUrl","pathPrefix","filterMatches","wpHostname","isHostedInWp","isInJSON","dispatch","pushNodeMeta","replaceNodeHtmlImages","html","useGatsbyImage","imgSrcRemoteFileRegex","imageUrlMatches","imgTagMatches","htmlMatchesWithImageResizes","matchInfo","get","isMediaItemNode","localFile","imgTagMaxWidth","mediaItemNodeWidth","mediaDetails","fallbackImageMaxWidth","extension","configuredMaxWidth","imageMaxWidth","quality","imageQuality","cache","gatsbyTransformerSharpSupportsThisFileType","supportedExtensions","fluidResult","file","args","imageResize","matchResize","imgOptions","style","presentationWidth","placeholderStyle","opacity","loading","alt","fadeIn","imgStyle","ReactGatsbyImage","fluid","React","createElement","Img","gatsbyImageStringJSON","stringify","ReactDOMServer","renderToString","gatsbyImageString","replaceFileLinks","createStaticFiles","hrefMatches","mediaItemUrlsAndMatches","matchGroup","isWebUri","findReplaceMaps","parent","mediaItemMatchGroup","_delimiter","_hostname","push","replaceNodeHtmlLinks","wpLinkRegex","RegExp","linkMatches","forEach","normalizedMatch","normalizedPath","thisMatchRegex","warning","processNodeString","nodeStringFilters","nodeStringFilter","processNode","nodeMediaItemIdReferences","add","processedNodeString"],"mappings":"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","sourcesContent":["import { isWebUri } from \"valid-url\"\nimport { fluid } from \"gatsby-plugin-sharp\"\nimport Img from \"gatsby-image\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport stringify from \"fast-json-stable-stringify\"\nimport execall from \"execall\"\nimport cheerio from \"cheerio\"\nimport url from \"url\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { supportedExtensions } from \"gatsby-transformer-sharp/supported-extensions\"\nimport replaceAll from \"replaceall\"\n\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport fetchReferencedMediaItemsAndCreateNodes, {\n  stripImageSizesFromUrl,\n} from \"../fetch-nodes/fetch-referenced-media-items\"\nimport btoa from \"btoa\"\nimport store from \"~/store\"\nimport { createRemoteMediaItemNode } from \"./create-remote-media-item-node\"\n\nconst getNodeEditLink = (node) => {\n  const { protocol, hostname } = url.parse(node.link)\n  const editUrl = `${protocol}//${hostname}/wp-admin/post.php?post=${node.databaseId}&action=edit`\n\n  return editUrl\n}\n\nconst findReferencedImageNodeIds = ({ nodeString, pluginOptions, node }) => {\n  // if the lazyNodes plugin option is set we don't need to find\n  // image node id's because those nodes will be fetched lazily in resolvers\n  if (pluginOptions.type.MediaItem.lazyNodes) {\n    return []\n  }\n\n  // get an array of all referenced media file ID's\n  const matchedIds = execall(\n    /\"__typename\":\"MediaItem\",\"id\":\"([^\"]*)\"/gm,\n    nodeString\n  )\n    .map((match) => match.subMatches[0])\n    .filter((id) => id !== node.id)\n\n  return matchedIds\n}\n\nconst getCheerioImgDbId = (cheerioImg) => {\n  // try to get the db id from data attributes\n  const dataAttributeId =\n    cheerioImg.attribs[`data-id`] || cheerioImg.attribs[`data-image-id`]\n\n  if (dataAttributeId) {\n    return dataAttributeId\n  }\n\n  if (!cheerioImg.attribs.class) {\n    return null\n  }\n\n  // try to get the db id from the wp-image-id classname\n  const wpImageClass = cheerioImg.attribs.class\n    .split(` `)\n    .find((className) => className.includes(`wp-image-`))\n\n  if (wpImageClass) {\n    const wpImageClassDashArray = wpImageClass.split(`-`)\n    const wpImageClassId = Number(\n      wpImageClassDashArray[wpImageClassDashArray.length - 1]\n    )\n\n    if (wpImageClassId) {\n      return wpImageClassId\n    }\n  }\n\n  return null\n}\n\n// media items are of the \"post\" type\nconst dbIdToMediaItemRelayId = (dbId) => (dbId ? btoa(`post:${dbId}`) : null)\n\nconst getCheerioImgRelayId = (cheerioImg) =>\n  dbIdToMediaItemRelayId(getCheerioImgDbId(cheerioImg))\n\nexport const ensureSrcHasHostname = ({ src, wpUrl }) => {\n  const { protocol, host } = url.parse(wpUrl)\n\n  if (src.startsWith(`/wp-content`)) {\n    src = `${protocol}//${host}${src}`\n  }\n\n  return src\n}\n\nconst pickNodeBySourceUrlOrCheerioImg = ({\n  url,\n  cheerioImg,\n  mediaItemNodes,\n}) => {\n  const possibleHtmlSrcs = [\n    // try to match the media item source url by original html src\n    url,\n    // or by the src minus any image sizes string\n    stripImageSizesFromUrl(url),\n  ]\n\n  const imageNode = mediaItemNodes.find(\n    (mediaItemNode) =>\n      // either find our node by the source url\n      possibleHtmlSrcs.includes(mediaItemNode.sourceUrl) ||\n      possibleHtmlSrcs.includes(\n        // try to match without -scaled in the sourceUrl as well\n        // since WP adds -scaled to image urls if they were too large\n        // at upload time but image urls in html don't have this requirement.\n        // the sourceUrl may have -scaled in it but the full size image is still\n        // stored on the server (just not in the db)\n        (mediaItemNode.sourceUrl || mediaItemNode.mediaItemUrl).replace(\n          `-scaled`,\n          ``\n        )\n      ) ||\n      // or by id for cases where the src url didn't return a node\n      (!!cheerioImg && getCheerioImgRelayId(cheerioImg) === mediaItemNode.id)\n  )\n\n  return imageNode\n}\n\nlet displayedFailedToRestoreMessage = false\n\nconst fetchNodeHtmlImageMediaItemNodes = async ({\n  cheerioImages,\n  node,\n  helpers,\n  wpUrl,\n}) => {\n  // get all the image nodes we've cached from elsewhere\n  const { nodeMetaByUrl } = store.getState().imageNodes\n\n  const previouslyCachedNodesByUrl = (\n    await Promise.all(\n      Object.entries(nodeMetaByUrl).map(([sourceUrl, { id } = {}]) => {\n        if (!sourceUrl || !id) {\n          return null\n        }\n\n        sourceUrl = ensureSrcHasHostname({ wpUrl, src: sourceUrl })\n\n        const existingNode = helpers.getNode(id)\n\n        if (!existingNode) {\n          if (!displayedFailedToRestoreMessage) {\n            helpers.reporter.warn(\n              formatLogMessage(\n                `File node failed to restore from cache. This is a bug in gatsby-source-wordpress. Please open an issue so we can help you out :)`\n              )\n            )\n            displayedFailedToRestoreMessage = true\n          }\n\n          return null\n        }\n\n        return {\n          sourceUrl,\n          ...existingNode,\n        }\n      })\n    )\n  ).filter(Boolean)\n\n  const mediaItemUrls = cheerioImages\n    // filter out nodes we already have\n    .filter(({ cheerioImg }) => {\n      const url = ensureSrcHasHostname({ wpUrl, src: cheerioImg.attribs.src })\n\n      const existingNode = pickNodeBySourceUrlOrCheerioImg({\n        url,\n        mediaItemNodes: previouslyCachedNodesByUrl,\n      })\n\n      return !existingNode\n    })\n    // get remaining urls\n    .map(({ cheerioImg }) => {\n      const src = ensureSrcHasHostname({\n        src: cheerioImg.attribs.src,\n        wpUrl,\n      })\n\n      return src\n    })\n\n  // build a query to fetch all media items that we don't already have\n  const mediaItemNodesBySourceUrl = await fetchReferencedMediaItemsAndCreateNodes(\n    {\n      mediaItemUrls,\n    }\n  )\n\n  // images that have been edited from the media library that were previously\n  // uploaded to a post/page will have a different sourceUrl so they can't be fetched by it\n  // in many cases we have data-id or data-image-id as attributes on the img\n  // we can try to use those to fetch media item nodes as well\n  // this will keep us from missing nodes\n  const mediaItemDbIds = cheerioImages\n    .map(({ cheerioImg }) => getCheerioImgDbId(cheerioImg))\n    .filter(Boolean)\n\n  const mediaItemRelayIds = mediaItemDbIds\n    .map((dbId) => dbIdToMediaItemRelayId(dbId))\n    .filter(\n      // filter out any media item ids we already fetched\n      (relayId) =>\n        ![...mediaItemNodesBySourceUrl, ...previouslyCachedNodesByUrl].find(\n          ({ id } = {}) => id === relayId\n        )\n    )\n\n  const mediaItemNodesById = await fetchReferencedMediaItemsAndCreateNodes({\n    referencedMediaItemNodeIds: mediaItemRelayIds,\n  })\n\n  const createdNodes = [...mediaItemNodesById, ...mediaItemNodesBySourceUrl]\n\n  const mediaItemNodes = [...createdNodes, ...previouslyCachedNodesByUrl]\n\n  const htmlMatchesToMediaItemNodesMap = new Map()\n  for (const { cheerioImg, match } of cheerioImages) {\n    const htmlImgSrc = ensureSrcHasHostname({\n      src: cheerioImg.attribs.src,\n      wpUrl,\n    })\n\n    let imageNode = pickNodeBySourceUrlOrCheerioImg({\n      url: htmlImgSrc,\n      cheerioImg,\n      mediaItemNodes,\n    })\n\n    if (!imageNode && htmlImgSrc) {\n      // if we didn't get a media item node for this image,\n      // we need to fetch it and create a file node for it with no\n      // media item node.\n      try {\n        imageNode = await createRemoteMediaItemNode({\n          skipExistingNode: true,\n          parentName: `Creating File node from URL where we couldn't find a MediaItem node`,\n          mediaItemNode: {\n            id: node.id,\n            mediaItemUrl: htmlImgSrc,\n            modifiedGmt: null,\n            mimeType: null,\n            title: null,\n            fileSize: null,\n            parentHtmlNode: node,\n          },\n        })\n      } catch (e) {\n        const sharedError = `when trying to fetch\\n${htmlImgSrc}\\nfrom ${\n          node.__typename\n        } #${node.databaseId} \"${node.title ?? node.id}\"`\n        const nodeEditLink = getNodeEditLink(node)\n\n        if (typeof e === `string` && e.includes(`404`)) {\n          helpers.reporter.log(``)\n          helpers.reporter.warn(\n            formatLogMessage(\n              `\\n\\nReceived a 404 ${sharedError}\\n\\nMost likely this image was uploaded to this ${node.__typename} and then deleted from the media library.\\nYou'll need to fix this and re-save this ${node.__typename} to remove this warning at\\n${nodeEditLink}.\\n\\n`\n            )\n          )\n          imageNode = null\n        } else {\n          helpers.reporter.warn(\n            `Received the below error ${sharedError}\\n\\n${nodeEditLink}\\n\\n`\n          )\n          helpers.reporter.panic(formatLogMessage(e))\n        }\n      }\n    }\n\n    cacheCreatedFileNodeBySrc({ node: imageNode, src: htmlImgSrc })\n\n    if (imageNode) {\n      // match is the html string of the img tag\n      htmlMatchesToMediaItemNodesMap.set(match, { imageNode, cheerioImg })\n    }\n  }\n\n  return htmlMatchesToMediaItemNodesMap\n}\n\nconst getCheerioElementFromMatch = (wpUrl) => ({ match, tag = `img` }) => {\n  // unescape quotes\n  const parsedMatch = JSON.parse(`\"${match}\"`)\n\n  // load our matching img tag into cheerio\n  const $ = cheerio.load(parsedMatch, {\n    xml: {\n      // make sure it's not wrapped in <body></body>\n      withDomLvl1: false,\n      // no need to normalize whitespace, we're dealing with a single element here\n      normalizeWhitespace: false,\n      xmlMode: true,\n      // entity decoding isn't our job here, that will be the responsibility of WPGQL\n      // or of the source plugin elsewhere.\n      decodeEntities: false,\n    },\n  })\n\n  // there's only ever one element due to our match matching a single tag\n  // $(tag) isn't an array, it's an object with a key of 0\n  const cheerioElement = $(tag)[0]\n\n  if (cheerioElement?.attribs?.src?.startsWith(`/wp-content`)) {\n    cheerioElement.attribs.src = `${wpUrl}${cheerioElement.attribs.src}`\n  }\n\n  return {\n    match,\n    cheerioElement,\n    // @todo this is from when this function was just used for images\n    // remove this by refactoring\n    cheerioImg: cheerioElement,\n  }\n}\n\nconst getLargestSizeFromSizesAttribute = (sizesString) => {\n  const sizesStringsArray = sizesString.split(`,`)\n\n  return sizesStringsArray.reduce((largest, currentSizeString) => {\n    const maxWidth = currentSizeString\n      .substring(\n        currentSizeString.indexOf(`max-width: `) + 1,\n        currentSizeString.indexOf(`px`)\n      )\n      .trim()\n\n    const maxWidthNumber = Number(maxWidth)\n    const noLargestAndMaxWidthIsANumber = !largest && !isNaN(maxWidthNumber)\n    const maxWidthIsALargerNumberThanLargest =\n      largest && !isNaN(maxWidthNumber) && maxWidthNumber > largest\n\n    if (noLargestAndMaxWidthIsANumber || maxWidthIsALargerNumberThanLargest) {\n      largest = maxWidthNumber\n    }\n\n    return largest\n  }, null)\n}\n\nconst findImgTagMaxWidthFromCheerioImg = (cheerioImg) => {\n  const {\n    attribs: { width, sizes },\n  } = cheerioImg || { attribs: { width: null, sizes: null } }\n\n  if (width) {\n    const widthNumber = Number(width)\n\n    if (!isNaN(widthNumber)) {\n      return widthNumber\n    }\n  }\n\n  if (sizes) {\n    const largestSize = getLargestSizeFromSizesAttribute(sizes)\n\n    if (largestSize && !isNaN(largestSize)) {\n      return largestSize\n    }\n  }\n\n  return null\n}\n\nconst getFileNodeRelativePathname = (fileNode) => {\n  const fileName = `${fileNode.internal.contentDigest}/${fileNode.base}`\n\n  return fileName\n}\n\nconst getFileNodePublicPath = (fileNode) => {\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const publicPath = path.join(process.cwd(), `public`, `static`, fileName)\n\n  return publicPath\n}\n\nconst copyFileToStaticAndReturnUrlPath = async (fileNode, helpers) => {\n  const publicPath = getFileNodePublicPath(fileNode)\n\n  if (!fs.existsSync(publicPath)) {\n    await fs.copy(\n      fileNode.absolutePath,\n      publicPath,\n      { dereference: true },\n      (err) => {\n        if (err) {\n          console.error(\n            `error copying file from ${fileNode.absolutePath} to ${publicPath}`,\n            err\n          )\n        }\n      }\n    )\n  }\n\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const relativeUrl = `${helpers.pathPrefix ?? ``}/static/${fileName}`\n\n  return relativeUrl\n}\n\nconst filterMatches = (wpUrl) => ({ match }) => {\n  const { hostname: wpHostname } = url.parse(wpUrl)\n\n  // @todo make it a plugin option to fetch non-wp images\n  // here we're filtering out image tags that don't contain our site url\n  const isHostedInWp =\n    // if it has the full WP url\n    match.includes(wpHostname) ||\n    // or it's an absolute path\n    match.includes(`src=\\\\\"/wp-content`)\n\n  // six backslashes means we're looking for three backslashes\n  // since we're looking for JSON encoded strings inside of our JSON encoded string\n  const isInJSON = match.includes(`src=\\\\\\\\\\\\\"`)\n\n  return isHostedInWp && !isInJSON\n}\n\nconst cacheCreatedFileNodeBySrc = ({ node, src }) => {\n  if (node) {\n    // save any fetched media items in our global media item cache\n    store.dispatch.imageNodes.pushNodeMeta({\n      sourceUrl: src,\n      id: node.id,\n      modifiedGmt: node.modifiedGmt,\n    })\n  }\n}\n\nconst replaceNodeHtmlImages = async ({\n  nodeString,\n  node,\n  helpers,\n  wpUrl,\n  pluginOptions,\n}) => {\n  // this prevents fetching inline html images\n  if (!pluginOptions?.html?.useGatsbyImage) {\n    return nodeString\n  }\n\n  const imgSrcRemoteFileRegex = /(?:src=\\\\\")((?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.|\\/)(?:\\([-A-Z0-9+&@#/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#/%=~_|$])\\.(?:jpeg|jpg|png|gif|ico|mpg|ogv|svg|bmp|tif|tiff))(\\?[^\\\\\" .]*|)(?=\\\\\"| |\\.)/gim\n\n  const imageUrlMatches = execall(imgSrcRemoteFileRegex, nodeString).filter(\n    ({ subMatches }) => {\n      // if our match is json encoded, that means it's inside a JSON\n      // encoded string field.\n      const isInJSON = subMatches[0].includes(`\\\\/\\\\/`)\n\n      // we shouldn't process encoded JSON, so skip this match if it's JSON\n      return !isInJSON\n    }\n  )\n\n  const imgTagMatches = execall(\n    /<img([\\w\\W]+?)[/]?>/gim,\n    nodeString\n      // we don't want to match images inside pre\n      .replace(/<pre([\\w\\W]+?)[/]?>.*(<\\/pre>)/gim, ``)\n      // and code tags, so temporarily remove those tags and everything inside them\n      .replace(/<code([\\w\\W]+?)[/]?>.*(<\\/code>)/gim, ``)\n  ).filter(filterMatches(wpUrl))\n\n  if (imageUrlMatches.length && imgTagMatches.length) {\n    const cheerioImages = imgTagMatches\n      .map(getCheerioElementFromMatch(wpUrl))\n      .filter(({ cheerioImg: { attribs } }) => {\n        if (!attribs.src) {\n          return false\n        }\n\n        return isWebUri(attribs.src)\n      })\n\n    const htmlMatchesToMediaItemNodesMap = await fetchNodeHtmlImageMediaItemNodes(\n      {\n        cheerioImages,\n        nodeString,\n        node,\n        helpers,\n        pluginOptions,\n        wpUrl,\n      }\n    )\n\n    // generate gatsby images for each cheerioImage\n    const htmlMatchesWithImageResizes = await Promise.all(\n      imgTagMatches.map(async ({ match }) => {\n        const matchInfo = htmlMatchesToMediaItemNodesMap.get(match)\n\n        if (!matchInfo) {\n          return null\n        }\n\n        const { imageNode, cheerioImg } = matchInfo\n\n        const isMediaItemNode = imageNode.__typename === `MediaItem`\n\n        if (!imageNode) {\n          return null\n        }\n\n        const fileNode =\n          // if we couldn't get a MediaItem node for this image in WPGQL\n          !isMediaItemNode\n            ? // this will already be a file node\n              imageNode\n            : // otherwise grab the file node\n              helpers.getNode(imageNode.localFile.id)\n\n        const imgTagMaxWidth = findImgTagMaxWidthFromCheerioImg(cheerioImg)\n\n        const mediaItemNodeWidth = isMediaItemNode\n          ? imageNode?.mediaDetails?.width\n          : null\n\n        // if a max width can't be inferred from html, this value will be passed to Sharp\n        let fallbackImageMaxWidth = pluginOptions?.html?.fallbackImageMaxWidth\n\n        if (\n          // if the image is smaller than the fallback max width,\n          // the images width will be used instead if we have a media item node\n          fallbackImageMaxWidth > mediaItemNodeWidth &&\n          // of course that means we have to have a media item node\n          // and a media item node max width\n          mediaItemNodeWidth &&\n          typeof mediaItemNodeWidth === `number` &&\n          mediaItemNodeWidth > 0\n        ) {\n          fallbackImageMaxWidth = mediaItemNodeWidth\n        }\n\n        let maxWidth =\n          // if we inferred a maxwidth from html\n          (imgTagMaxWidth &&\n          // and we have a media item node to know it's full size max width\n          mediaItemNodeWidth &&\n          // and this isn't an svg which has no maximum width\n          fileNode.extension !== `svg` &&\n          // and the media item node max width is smaller than what we inferred\n          // from html\n          mediaItemNodeWidth < imgTagMaxWidth\n            ? // use the media item node width\n              mediaItemNodeWidth\n            : // otherwise use the width inferred from html\n              imgTagMaxWidth) ??\n          // if we don't have a media item node and we inferred no width\n          // from html, then use the fallback max width from plugin options\n          fallbackImageMaxWidth\n\n        const configuredMaxWidth = pluginOptions?.html?.imageMaxWidth\n\n        // if the configured html.maxWidth property is less than the result, then\n        // override the resultant width\n        if (configuredMaxWidth && configuredMaxWidth < maxWidth) {\n          maxWidth = configuredMaxWidth\n        }\n\n        const quality = pluginOptions?.html?.imageQuality\n\n        const { reporter, cache, pathPrefix } = helpers\n\n        const gatsbyTransformerSharpSupportsThisFileType =\n          supportedExtensions[fileNode?.extension]\n\n        let fluidResult = null\n\n        if (gatsbyTransformerSharpSupportsThisFileType) {\n          try {\n            fluidResult = await fluid({\n              file: fileNode,\n              args: {\n                maxWidth,\n                quality,\n                pathPrefix,\n              },\n              reporter,\n              cache,\n            })\n          } catch (e) {\n            reporter.error(e)\n            reporter.warn(\n              formatLogMessage(\n                `${node.__typename} ${node.id} couldn't process inline html image ${fileNode.url}`\n              )\n            )\n            return null\n          }\n        }\n\n        return {\n          match,\n          cheerioImg,\n          fileNode,\n          imageResize: fluidResult,\n          maxWidth,\n        }\n      })\n    )\n\n    // find/replace mutate nodeString to replace matched images with rendered gatsby images\n    for (const matchResize of htmlMatchesWithImageResizes) {\n      if (!matchResize) {\n        continue\n      }\n\n      const { match, imageResize, cheerioImg, maxWidth } = matchResize\n\n      // @todo retain img tag classes and attributes from cheerioImg\n      const imgOptions = {\n        style: {\n          // these styles make it so that the image wont be stretched\n          // beyond it's max width, but it also wont exceed the width\n          // of it's parent element\n          maxWidth: `100%`,\n          width: `${imageResize?.presentationWidth || maxWidth}px`,\n        },\n        placeholderStyle: {\n          opacity: 0,\n        },\n        className: `${\n          cheerioImg?.attribs?.class || ``\n        } inline-gatsby-image-wrapper`,\n        loading: `eager`,\n        alt: cheerioImg?.attribs?.alt,\n        fadeIn: true,\n        imgStyle: {\n          opacity: 1,\n        },\n      }\n\n      let ReactGatsbyImage\n\n      if (imageResize) {\n        imgOptions.fluid = imageResize\n        ReactGatsbyImage = React.createElement(Img, imgOptions, null)\n      } else {\n        const { fileNode } = matchResize\n\n        const relativeUrl = await copyFileToStaticAndReturnUrlPath(\n          fileNode,\n          helpers\n        )\n\n        imgOptions.src = relativeUrl\n\n        delete imgOptions.imgStyle\n        delete imgOptions.fadeIn\n        delete imgOptions.placeholderStyle\n\n        ReactGatsbyImage = React.createElement(`img`, imgOptions, null)\n      }\n\n      const gatsbyImageStringJSON = JSON.stringify(\n        ReactDOMServer.renderToString(ReactGatsbyImage)\n          .replace(/<div/gm, `<span`)\n          .replace(/<\\/div/gm, `</span`)\n      )\n\n      // need to remove the JSON stringify quotes around our image since we're\n      // threading this JSON string back into a larger JSON object string\n      const gatsbyImageString = gatsbyImageStringJSON.substring(\n        1,\n        gatsbyImageStringJSON.length - 1\n      )\n\n      nodeString = replaceAll(match, gatsbyImageString, nodeString)\n    }\n  }\n\n  return nodeString\n}\n\nconst replaceFileLinks = async ({\n  nodeString,\n  helpers,\n  wpUrl,\n  pluginOptions,\n  node,\n}) => {\n  if (!pluginOptions?.html?.createStaticFiles) {\n    return nodeString\n  }\n\n  if (node.__typename === `MediaItem`) {\n    // we dont' want to replace file links on MediaItem nodes because they're processed specially from other node types.\n    // if we replace file links here then we wont be able to properly fetch the localFile node\n    return nodeString\n  }\n\n  const hrefMatches = execall(\n    /(\\\\\"|\\\\'|\\()([^'\"()]*)(\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\))/gm,\n    nodeString\n  )\n\n  if (hrefMatches.length) {\n    // eslint-disable-next-line arrow-body-style\n    const mediaItemUrlsAndMatches = hrefMatches.map((matchGroup) => ({\n      matchGroup,\n      url: `${wpUrl}${matchGroup.subMatches[2]}`,\n    }))\n\n    const mediaItemUrls = mediaItemUrlsAndMatches\n      .map(({ url }) => url)\n      .filter(isWebUri)\n\n    const mediaItemNodesBySourceUrl = await fetchReferencedMediaItemsAndCreateNodes(\n      {\n        mediaItemUrls,\n      }\n    )\n\n    const findReplaceMaps = []\n\n    await Promise.all(\n      mediaItemNodesBySourceUrl.map(async (node) => {\n        let fileNode\n        let mediaItemNode\n\n        if (node.internal.type === `File`) {\n          fileNode = node\n          mediaItemNode = await helpers.getNode(node.parent)\n        } else if (node.localFile?.id) {\n          fileNode = await helpers.getNode(node.localFile.id)\n          mediaItemNode = node\n        } else {\n          return null\n        }\n\n        const relativeUrl = await copyFileToStaticAndReturnUrlPath(\n          fileNode,\n          helpers\n        )\n\n        if (!relativeUrl || !mediaItemNode?.mediaItemUrl || !fileNode) {\n          return null\n        }\n\n        const mediaItemMatchGroup = mediaItemUrlsAndMatches.find(\n          ({\n            matchGroup: {\n              subMatches: [_delimiter, _hostname, path],\n            },\n          }) => mediaItemNode.mediaItemUrl.includes(path)\n        )?.matchGroup\n\n        if (!mediaItemMatchGroup) {\n          return null\n        }\n\n        const [, hostname, path] = mediaItemMatchGroup?.subMatches\n\n        cacheCreatedFileNodeBySrc({\n          node: mediaItemNode,\n          src: `${wpUrl}${path}`,\n        })\n\n        findReplaceMaps.push({\n          find: `${hostname || ``}${path}`,\n          replace: relativeUrl,\n        })\n\n        findReplaceMaps.push({\n          find: path,\n          replace: relativeUrl,\n        })\n      })\n    )\n\n    for (const { find, replace } of findReplaceMaps.filter(Boolean)) {\n      nodeString = replaceAll(find, replace, nodeString)\n    }\n  }\n\n  return nodeString\n}\n\n// replaces any url which is a front-end WP url with a relative path\nconst replaceNodeHtmlLinks = ({ wpUrl, nodeString, node }) => {\n  const wpLinkRegex = new RegExp(\n    `[\"']${wpUrl}(?!/wp-content|/wp-admin|/wp-includes)(/[^'\"]+)[\"']`,\n    `gim`\n  )\n\n  const linkMatches = execall(wpLinkRegex, nodeString)\n\n  if (linkMatches.length) {\n    linkMatches.forEach(({ match, subMatches: [path] }) => {\n      if (path) {\n        try {\n          // remove \\, \" and ' characters from match\n          const normalizedMatch = match\n            .replace(/['\"\\\\]/g, ``)\n            // ensure that query params are properly quoted\n            .replace(/\\?/, `\\\\?`)\n\n          const normalizedPath = path.replace(/\\\\/g, ``)\n\n          // replace normalized match with relative path\n          const thisMatchRegex = new RegExp(normalizedMatch, `g`)\n          nodeString = nodeString.replace(thisMatchRegex, normalizedPath)\n        } catch (e) {\n          console.error(e)\n          console.warning(\n            formatLogMessage(\n              `Failed to process inline html links in ${node.__typename} ${node.id}`\n            )\n          )\n        }\n      }\n    })\n  }\n\n  return nodeString\n}\n\nconst processNodeString = async ({\n  nodeString,\n  node,\n  pluginOptions,\n  helpers,\n  wpUrl,\n}) => {\n  const nodeStringFilters = [\n    replaceNodeHtmlImages,\n    replaceFileLinks,\n    replaceNodeHtmlLinks,\n  ]\n\n  for (const nodeStringFilter of nodeStringFilters) {\n    nodeString = await nodeStringFilter({\n      nodeString,\n      node,\n      pluginOptions,\n      helpers,\n      wpUrl,\n    })\n  }\n\n  return nodeString\n}\n\nconst processNode = async ({\n  node,\n  pluginOptions,\n  wpUrl,\n  helpers,\n  referencedMediaItemNodeIds,\n}) => {\n  const nodeString = stringify(node)\n\n  // find referenced node ids\n  // here we're searching for node id strings in our node\n  // we use this to download only the media items\n  // that are being used in posts\n  // this is important for downloading images nodes that are connected somewhere\n  // on a node field\n  const nodeMediaItemIdReferences = findReferencedImageNodeIds({\n    nodeString,\n    pluginOptions,\n    node,\n  })\n\n  // push them to our store of referenced id's\n  if (nodeMediaItemIdReferences?.length && referencedMediaItemNodeIds) {\n    nodeMediaItemIdReferences.forEach((id) =>\n      referencedMediaItemNodeIds.add(id)\n    )\n  }\n\n  const processedNodeString = await processNodeString({\n    nodeString,\n    node,\n    pluginOptions,\n    helpers,\n    wpUrl,\n  })\n\n  // only parse if the nodeString has changed\n  if (processedNodeString !== nodeString) {\n    return JSON.parse(processedNodeString)\n  } else {\n    return node\n  }\n}\n\nexport { processNode }\n"],"file":"process-node.js"}