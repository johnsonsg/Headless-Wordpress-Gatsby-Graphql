{"version":3,"sources":["../../../src/steps/ingest-remote-schema/introspect-remote-schema.js"],"names":["introspectAndStoreRemoteSchema","state","store","getState","pluginOptions","gatsbyApi","schemaWasChanged","remoteSchema","INTROSPECTION_CACHE_KEY","url","introspectionData","key","printSchemaDiff","debug","graphql","printIntrospectionDiff","preview","staleIntrospectionData","data","query","introspectionQuery","value","console","log","__schema","types","forEach","type","staleTypeJSON","JSON","stringify","newType","find","name","newTypeJSON","typeDiff","diff","diffJson","length","part","added","removed","chalk","green","bold","trim","split","map","line","index","join","typeMap","Map","dispatch","setState"],"mappings":"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","sourcesContent":["import chalk from \"chalk\"\nimport * as diff from \"diff\"\nimport { uniqBy } from \"lodash\"\nimport store from \"~/store\"\nimport { setPersistentCache, getPersistentCache } from \"~/utils/cache\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { introspectionQuery } from \"~/utils/graphql-queries\"\n\nconst introspectAndStoreRemoteSchema = async () => {\n  const state = store.getState()\n  const { pluginOptions } = state.gatsbyApi\n  const { schemaWasChanged } = state.remoteSchema\n\n  const INTROSPECTION_CACHE_KEY = `${pluginOptions.url}--introspection-data`\n  let introspectionData = await getPersistentCache({\n    key: INTROSPECTION_CACHE_KEY,\n  })\n\n  const printSchemaDiff =\n    pluginOptions?.debug?.graphql?.printIntrospectionDiff ||\n    pluginOptions?.debug?.preview\n\n  let staleIntrospectionData\n\n  if (!introspectionData || schemaWasChanged) {\n    const { data } = await fetchGraphql({\n      query: introspectionQuery,\n    })\n\n    if (introspectionData) {\n      staleIntrospectionData = introspectionData\n    }\n\n    introspectionData = data\n\n    // cache introspection response\n    await setPersistentCache({\n      key: INTROSPECTION_CACHE_KEY,\n      value: introspectionData,\n    })\n  }\n\n  if (staleIntrospectionData && printSchemaDiff) {\n    console.log(`\\nData changed in WordPress schema:`)\n    staleIntrospectionData.__schema.types.forEach(type => {\n      const staleTypeJSON = JSON.stringify(type, null, 2)\n\n      const newType = introspectionData.__schema.types.find(\n        ({ name }) => name === type.name\n      )\n      const newTypeJSON = JSON.stringify(newType, null, 2)\n\n      if (staleTypeJSON === newTypeJSON) {\n        return\n      }\n\n      const typeDiff =\n        type && newType ? uniqBy(diff.diffJson(type, newType), `value`) : null\n\n      if (typeDiff?.length) {\n        console.log(`\\nFound changes to the ${type.name} type\\n`)\n        typeDiff.forEach(part => {\n          if (part.added || part.removed) {\n            console.log(\n              chalk.green(\n                chalk.bold(`${part.added ? `Added` : `Removed`}:\\n`) +\n                  part.value\n                    .trim()\n                    .split(`\\n`)\n                    .map(\n                      (line, index) =>\n                        `${part.added ? `+` : `-`}${\n                          index === 0 ? `\\t` : ` `\n                        }${line}`\n                    )\n                    .join(`\\n`)\n              )\n            )\n          }\n        })\n        console.log(`\\n`)\n      }\n    })\n  }\n\n  const typeMap = new Map(\n    introspectionData.__schema.types.map(type => [type.name, type])\n  )\n\n  store.dispatch.remoteSchema.setState({ introspectionData, typeMap })\n}\n\nexport { introspectAndStoreRemoteSchema }\n"],"file":"introspect-remote-schema.js"}