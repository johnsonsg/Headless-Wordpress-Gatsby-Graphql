{"version":3,"sources":["../../src/steps/persist-cached-images.ts"],"names":["persistPreviouslyCachedImages","helpers","pluginOptions","mediaItemNodes","getNodesByType","schema","typePrefix","forEach","id","actions","touchNode","nodeId","imageNodeMetaByUrl","key","store","dispatch","imageNodes","setState","nodeMetaByUrl"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA,MAAMA,6BAAmC,GAAG,YAA2B;AACrE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6B,iCAAnC,CADqE,CAGrE;;AACA,QAAMC,cAAc,GAAGF,OAAO,CAACG,cAAR,CACpB,GAAEF,aAAa,CAACG,MAAd,CAAqBC,UAAW,WADd,CAAvB,CAJqE,CAQrE;AACA;;AACAH,EAAAA,cAAc,CAACI,OAAf,CAAuB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAYP,OAAO,CAACQ,OAAR,CAAgBC,SAAhB,CAA0B;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAA1B,CAAnC;AAEA,QAAMI,kBAAkB,GAAG,MAAM,+BAAmB;AAClDC,IAAAA,GAAG,EAAG;AAD4C,GAAnB,CAAjC;;AAIA,MAAID,kBAAJ,EAAwB;AACtBE,mBAAMC,QAAN,CAAeC,UAAf,CAA0BC,QAA1B,CAAmC;AACjCC,MAAAA,aAAa,EAAEN;AADkB,KAAnC;AAGD;AACF,CArBD","sourcesContent":["import { Step } from \"./../utils/run-steps\"\nimport store from \"~/store\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nconst persistPreviouslyCachedImages: Step = async (): Promise<void> => {\n  const { helpers, pluginOptions } = getGatsbyApi()\n\n  // get all existing media item nodes\n  const mediaItemNodes = helpers.getNodesByType(\n    `${pluginOptions.schema.typePrefix}MediaItem`\n  )\n\n  // and touch them so they aren't garbage collected.\n  // we will remove them as needed when receiving DELETE events from WP\n  mediaItemNodes.forEach(({ id }) => helpers.actions.touchNode({ nodeId: id }))\n\n  const imageNodeMetaByUrl = await getPersistentCache({\n    key: `image-node-meta-by-url`,\n  })\n\n  if (imageNodeMetaByUrl) {\n    store.dispatch.imageNodes.setState({\n      nodeMetaByUrl: imageNodeMetaByUrl,\n    })\n  }\n}\n\nexport { persistPreviouslyCachedImages }\n"],"file":"persist-cached-images.js"}