{"version":3,"sources":["../../../../src/steps/create-schema-customization/transform-fields/transform-object.js"],"names":["transformListOfGatsbyNodes","field","fieldName","typeName","type","ofType","name","resolve","source","args","context","nodes","Array","isArray","nodeModel","getNodesByIds","ids","map","node","id","buildGatsbyNodeObjectResolver","_","nodeField","existingNode","getNodeById","queryInfo","isLazyMediaItem","typeInfo","nodesTypeName","settings","lazyNodes","actionType","singleName","singularName","helpers","actions","createParentChildLink","parent","child","transformGatsbyNodeObject","transformerApi"],"mappings":"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","sourcesContent":["import { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport { fetchAndCreateSingleNode } from \"~/steps/source-nodes/update-nodes/wp-actions/update\"\nimport { getQueryInfoByTypeName } from \"~/steps/source-nodes/helpers\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { inPreviewMode } from \"~/steps/preview/index\"\n\nexport const transformListOfGatsbyNodes = ({ field, fieldName }) => {\n  const typeName = buildTypeName(field.type.ofType.name)\n\n  return {\n    type: `[${typeName}]`,\n    resolve: (source, args, context) => {\n      let nodes = null\n\n      const field = source[fieldName]\n\n      if (field && Array.isArray(field)) {\n        nodes = field\n      } else if (Array.isArray(source?.nodes)) {\n        nodes = source.nodes\n      }\n\n      if (!nodes) {\n        return null\n      }\n\n      return context.nodeModel.getNodesByIds({\n        ids: nodes.map(node => node?.id),\n        type: typeName,\n      })\n    },\n  }\n}\n\nexport const buildGatsbyNodeObjectResolver = ({ field, fieldName }) => async (\n  source,\n  _,\n  context\n) => {\n  const typeName = buildTypeName(field.type.name)\n  const nodeField = source[fieldName]\n\n  if (!nodeField || (nodeField && !nodeField.id)) {\n    return null\n  }\n\n  const existingNode = context.nodeModel.getNodeById({\n    id: nodeField.id,\n    type: typeName,\n  })\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  const queryInfo = getQueryInfoByTypeName(field.type.name)\n\n  const isLazyMediaItem =\n    queryInfo.typeInfo.nodesTypeName === `MediaItem` &&\n    queryInfo.settings.lazyNodes\n\n  if (\n    // only fetch/create nodes in resolvers for media items when they have lazyNodes enabled\n    !isLazyMediaItem &&\n    // but if we're in preview mode we want to lazy fetch nodes\n    // because if nodes are limited we still want to lazy fetch connections\n    !inPreviewMode()\n  ) {\n    return null\n  }\n\n  // if this node doesn't exist, fetch it and create a node\n  const { node } = await fetchAndCreateSingleNode({\n    id: nodeField.id,\n    actionType: `CREATE`,\n    singleName: queryInfo.typeInfo.singularName,\n  })\n\n  if (source.id && node) {\n    const { helpers } = getGatsbyApi()\n\n    await helpers.actions.createParentChildLink({\n      parent: source,\n      child: node,\n    })\n  }\n\n  return node || null\n}\n\nexport const transformGatsbyNodeObject = transformerApi => {\n  const { field } = transformerApi\n  const typeName = buildTypeName(field.type.name)\n\n  return {\n    type: typeName,\n    resolve: buildGatsbyNodeObjectResolver(transformerApi),\n  }\n}\n"],"file":"transform-object.js"}