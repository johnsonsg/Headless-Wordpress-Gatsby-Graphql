{"version":3,"sources":["../../../src/steps/preview/index.ts"],"names":["inPreviewMode","process","env","ENABLE_GATSBY_REFRESH_ENDPOINT","store","getState","previewStore","previewQueue","getPreviewQueue","previewRequestConcurrency","gatsbyApi","pluginOptions","schema","PQueue","concurrency","carryoverConcurrencyCount","previewForIdIsAlreadyBeingProcessed","id","existingCallbacks","nodePageCreatedCallbacks","alreadyProcessingThisPreview","writeDummyPageDataJsonIfNeeded","previewData","pageNode","isDraft","pageDataDirectory","path","join","cwd","fs","ensureDir","pageDataPath","pageDataExists","pathExists","writeJSON","createPreviewStatusCallback","reporter","passedNode","context","status","graphqlEndpoint","error","statusContext","message","data","url","query","variables","input","clientMutationId","modified","pagePath","parentDatabaseId","previewDatabaseId","errorContext","forceReportCriticalErrors","headers","WPGatsbyPreview","token","WPGatsbyPreviewUser","userDatabaseId","wpGatsbyRemotePreviewStatus","success","log","sourcePreview","requiredProperties","missingProperties","filter","property","length","warn","info","JSON","stringify","hostname","settingsHostname","urlUtil","parse","remoteHostname","remoteUrl","sendPreviewStatus","databaseId","chalk","bold","dispatch","setInPreviewMode","subscribeToPagesCreatedFromNodeById","nodeId","actionType","previewParentId","isPreview","sourcePreviews","webhookBody","debug","preview","inPreviewDebugMode","previewActions","contentTypePlural","nodeTypeName","Date","now","queue","add","Promise","all","onEmpty","onIdle"],"mappings":"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","sourcesContent":["import { getPluginOptions } from \"./../../utils/get-gatsby-api\"\nimport { GatsbyHelpers } from \"~/utils/gatsby-types\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport chalk from \"chalk\"\nimport urlUtil from \"url\"\nimport PQueue from \"p-queue\"\nimport { dump } from \"dumper.js\"\n\nimport { paginatedWpNodeFetch } from \"~/steps/source-nodes/fetch-nodes/fetch-nodes-paginated\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\n\nimport store from \"~/store\"\n\nimport { fetchAndCreateSingleNode } from \"~/steps/source-nodes/update-nodes/wp-actions/update\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { touchValidNodes } from \"../source-nodes/update-nodes/fetch-node-updates\"\n\nimport { IPluginOptions } from \"~/models/gatsby-api\"\nimport { Reporter } from \"gatsby\"\n\nexport const inPreviewMode = (): boolean =>\n  !!process.env.ENABLE_GATSBY_REFRESH_ENDPOINT &&\n  !!store.getState().previewStore.inPreviewMode\n\nexport type PreviewStatusUnion =\n  | `PREVIEW_SUCCESS`\n  | `NO_PAGE_CREATED_FOR_PREVIEWED_NODE`\n  | `GATSBY_PREVIEW_PROCESS_ERROR`\n  | `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`\n\nexport interface IWebhookBody {\n  previewDatabaseId: number\n  userDatabaseId: number\n  token: string\n  remoteUrl: string\n  modified: string\n  parentDatabaseId: number\n  id: string\n  isDraft: boolean\n  singleName: string\n  since?: number\n  refreshing?: boolean\n  preview?: boolean\n}\n\ninterface IPageNode {\n  path: string\n}\n\nlet previewQueue: PQueue\n\nconst getPreviewQueue = (): PQueue => {\n  if (!previewQueue) {\n    const {\n      previewRequestConcurrency,\n    } = store.getState().gatsbyApi.pluginOptions.schema\n\n    previewQueue = new PQueue({\n      concurrency: previewRequestConcurrency,\n      carryoverConcurrencyCount: true,\n    })\n  }\n\n  return previewQueue\n}\n\n// This checks wether or not we're already currently processing a preview\n// for the passed preview id.\nconst previewForIdIsAlreadyBeingProcessed = (id: string): boolean => {\n  if (!id) {\n    return false\n  }\n\n  const existingCallbacks = store.getState().previewStore\n    .nodePageCreatedCallbacks\n\n  const alreadyProcessingThisPreview = !!existingCallbacks?.[id]\n\n  return alreadyProcessingThisPreview\n}\n\n/**\n * For previews of draft posts, gatsby develop will throw a bunch of 404 errors\n * while WPGatsby is trying to read page-data.json\n * So we can write a dummy page-data.json if one doesn't exist.\n * that way there will be no 404's and Gatsby will overwrite our dummy file when it\n * needs to.\n */\nconst writeDummyPageDataJsonIfNeeded = async ({\n  previewData,\n  pageNode,\n}: {\n  previewData: IWebhookBody\n  pageNode: IPageNode\n}): Promise<void> => {\n  if (!previewData.isDraft) {\n    return\n  }\n\n  const pageDataDirectory = path.join(\n    process.cwd(),\n    `public/page-data`,\n    pageNode.path\n  )\n\n  await fs.ensureDir(pageDataDirectory)\n\n  const pageDataPath = path.join(pageDataDirectory, `page-data.json`)\n\n  const pageDataExists = await fs.pathExists(pageDataPath)\n\n  if (!pageDataExists) {\n    await fs.writeJSON(pageDataPath, {\n      isDraft: previewData.isDraft,\n    })\n  }\n}\n\ninterface IOnPreviewStatusInput {\n  status: PreviewStatusUnion\n  context?: string\n  nodeId?: string\n  passedNode?: {\n    modified?: string\n    databaseId: number\n  }\n  pageNode?: IPageNode\n  graphqlEndpoint?: string\n  error?: Error\n}\n\nconst createPreviewStatusCallback = ({\n  previewData,\n  reporter,\n}: {\n  previewData: IWebhookBody\n  reporter: Reporter\n}) => async ({\n  passedNode,\n  pageNode,\n  context,\n  status,\n  graphqlEndpoint,\n  error,\n}: IOnPreviewStatusInput): Promise<void> => {\n  if (status === `PREVIEW_SUCCESS`) {\n    // we might need to write a dummy page-data.json so that\n    // Gatsby doesn't throw 404 errors when WPGatsby tries to read this file\n    // that maybe doesn't exist yet\n    await writeDummyPageDataJsonIfNeeded({ previewData, pageNode })\n  }\n\n  const statusContext = error?.message\n    ? `${context}\\n\\n${error.message}`\n    : context\n\n  const { data } = await fetchGraphql({\n    url: graphqlEndpoint,\n    query: /* GraphQL */ `\n      mutation MUTATE_PREVIEW_NODE($input: WpGatsbyRemotePreviewStatusInput!) {\n        wpGatsbyRemotePreviewStatus(input: $input) {\n          success\n        }\n      }\n    `,\n    variables: {\n      input: {\n        clientMutationId: `sendPreviewStatus`,\n        modified: passedNode?.modified,\n        pagePath: pageNode?.path,\n        parentDatabaseId:\n          previewData.parentDatabaseId || previewData.previewDatabaseId, // if the parentDatabaseId is 0 we want to use the previewDatabaseId\n        status,\n        statusContext,\n      },\n    },\n    errorContext: `Error occurred while mutating WordPress Preview node meta.`,\n    forceReportCriticalErrors: true,\n    headers: {\n      WPGatsbyPreview: previewData.token,\n      WPGatsbyPreviewUser: previewData.userDatabaseId,\n    },\n  })\n\n  if (data?.wpGatsbyRemotePreviewStatus?.success) {\n    reporter.log(\n      formatLogMessage(\n        `Successfully sent Preview status back to WordPress post ${previewData.id} during ${context}`\n      )\n    )\n  } else {\n    reporter.log(\n      formatLogMessage(\n        `failed to mutate WordPress post ${previewData.id} during Preview ${context}.\\nCheck your WP server logs for more information.`\n      )\n    )\n  }\n}\n\n/**\n * This is called and passed the result from the ActionMonitor.previewData object along with a JWT token\n * It sources a single preview and creates the callback that's invoked to send preview status back to WPGatsby.\n * When the preview status is sent back to Gatsby, the preview action that this\n * logic is processing is deleted in the WP instance. That's why we call\n * previewForIdIsAlreadyBeingProcessed to see if another preview webhook\n * already started processing for this action\n */\nexport const sourcePreview = async (\n  { previewData, reporter }: { previewData: IWebhookBody; reporter: Reporter },\n  { url }: IPluginOptions\n): Promise<void> => {\n  if (previewForIdIsAlreadyBeingProcessed(previewData?.id)) {\n    return\n  }\n\n  const requiredProperties = [\n    `previewDatabaseId`,\n    `id`,\n    `token`,\n    `remoteUrl`,\n    `parentDatabaseId`,\n    `modified`,\n    `userDatabaseId`,\n  ]\n\n  const missingProperties = requiredProperties.filter(\n    property => !(property in previewData)\n  )\n\n  if (!previewData || missingProperties.length) {\n    reporter.warn(\n      formatLogMessage(\n        `sourcePreview was called but the required previewData properties weren't provided.`\n      )\n    )\n    reporter.info(\n      formatLogMessage(\n        `Missing properties: \\n${JSON.stringify(missingProperties, null, 2)}`\n      )\n    )\n    reporter.log(\n      formatLogMessage(`previewData: \\n${JSON.stringify(previewData, null, 2)}`)\n    )\n    return\n  }\n\n  await touchValidNodes()\n\n  const { hostname: settingsHostname } = urlUtil.parse(url)\n  const { hostname: remoteHostname } = urlUtil.parse(previewData.remoteUrl)\n\n  const sendPreviewStatus = createPreviewStatusCallback({\n    previewData,\n    reporter,\n  })\n\n  if (settingsHostname !== remoteHostname) {\n    await sendPreviewStatus({\n      status: `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`,\n      context: `check that the preview data came from the right URL.`,\n      passedNode: {\n        modified: previewData.modified,\n        databaseId: previewData.parentDatabaseId,\n      },\n      graphqlEndpoint: previewData.remoteUrl,\n    })\n\n    reporter.warn(\n      formatLogMessage(\n        `Received preview data from a different remote URL than the one specified in plugin options. \\n\\n ${chalk.bold(\n          `Remote URL:`\n        )} ${previewData.remoteUrl}\\n ${chalk.bold(\n          `Plugin options URL:`\n        )} ${url}`\n      )\n    )\n\n    return\n  }\n\n  store.dispatch.previewStore.setInPreviewMode(true)\n\n  // this callback will be invoked when the page is created/updated for this node\n  // then it'll send a mutation to WPGraphQL so that WP knows the preview is ready\n  store.dispatch.previewStore.subscribeToPagesCreatedFromNodeById({\n    nodeId: previewData.id,\n    modified: previewData.modified,\n    sendPreviewStatus,\n  })\n\n  await fetchAndCreateSingleNode({\n    actionType: `PREVIEW`,\n    ...previewData,\n    previewParentId: previewData.parentDatabaseId,\n    isPreview: true,\n  })\n}\n\n/**\n * This is called when the /__refresh endpoint is posted to from WP previews.\n * It should only ever run in Preview mode, which is process.env.ENABLE_GATSBY_REFRESH_ENDPOINT = true\n * It first sources all pending preview actions, then calls sourcePreview() for each of them.\n */\nexport const sourcePreviews = async (\n  { webhookBody, reporter }: GatsbyHelpers,\n  pluginOptions: IPluginOptions\n): Promise<void> => {\n  const {\n    debug: { preview: inPreviewDebugMode },\n  } = getPluginOptions()\n\n  if (inPreviewDebugMode) {\n    reporter.info(`Sourcing previews for the following webhook:`)\n    dump(webhookBody)\n  }\n\n  if (previewForIdIsAlreadyBeingProcessed(webhookBody?.id)) {\n    if (inPreviewDebugMode) {\n      reporter.info(\n        `Preview for id ${webhookBody?.id} is already being sourced.`\n      )\n    }\n    return\n  }\n\n  const previewActions = await paginatedWpNodeFetch({\n    contentTypePlural: `actionMonitorActions`,\n    nodeTypeName: `ActionMonitor`,\n    headers: {\n      WPGatsbyPreview: webhookBody.token,\n      WPGatsbyPreviewUser: webhookBody.userDatabaseId,\n    },\n    query: /* GraphQL */ `\n      query PREVIEW_ACTIONS($after: String) {\n        actionMonitorActions(\n          where: {\n            previewStream: true\n            status: PRIVATE\n            orderby: { field: MODIFIED, order: DESC }\n            sinceTimestamp: ${\n              // only source previews made in the last 10 minutes\n              Date.now() - 1000 * 60 * 10\n            }\n          }\n          first: 100\n          after: $after\n        ) {\n          nodes {\n            previewData {\n              id\n              isDraft\n              modified\n              parentDatabaseId\n              previewDatabaseId\n              remoteUrl\n              singleName\n              userDatabaseId\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `,\n  })\n\n  if (!previewActions?.length) {\n    if (inPreviewDebugMode) {\n      reporter.info(\n        `Preview for id ${webhookBody?.id} returned no action monitor actions.`\n      )\n    }\n    return\n  }\n\n  if (inPreviewDebugMode) {\n    reporter.info(\n      `Preview for id ${webhookBody?.id} returned the following actions:`\n    )\n    dump(previewActions)\n  }\n\n  const queue = getPreviewQueue()\n\n  for (const { previewData } of previewActions) {\n    queue.add(() =>\n      sourcePreview(\n        {\n          previewData: { ...previewData, token: webhookBody.token },\n          reporter,\n        },\n        pluginOptions\n      )\n    )\n  }\n\n  await Promise.all([queue.onEmpty(), queue.onIdle()])\n}\n"],"file":"index.js"}