{"version":3,"sources":["../../../src/steps/source-nodes/index.ts"],"names":["sourceNodes","helpers","pluginOptions","cache","webhookBody","preview","token","userDatabaseId","now","Date","nonNodeRootFieldsPromise","lastCompletedSourceTime","refreshing","since","get","LAST_COMPLETED_SOURCE_TIME","schemaWasChanged","foundUsableHardCachedData","store","getState","remoteSchema","fetchEverything","process","env","NODE_ENV","set","dispatch","setSchemaWasChanged","develop","resumeRefreshPolling"],"mappings":";;;;;;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,WAAiB,GAAG,OAAOC,OAAP,EAAgBC,aAAhB,KAAkC;AAC1D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAyBH,OAA/B,CAD0D,CAG1D;;AACA,MAAIG,WAAW,CAACC,OAAhB,EAAyB;AACvB,UAAM,6BAAeJ,OAAf,EAAwBC,aAAxB,CAAN;AAEA;AACD,GAJD,CAKA;AACA;AANA,OAOK,IAAIE,WAAW,CAACE,KAAZ,IAAqBF,WAAW,CAACG,cAArC,EAAqD;AACxD,YAAM,6BAAeN,OAAf,EAAwBC,aAAxB,CAAN;AACD;;AAED,QAAMM,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAf0D,CAiB1D;AACA;;AACA,QAAME,wBAAwB,GAAG,+CAAjC;AAEA,QAAMC,uBAAuB,GAC3BP,WAAW,CAACQ,UAAZ,IAA0BR,WAAW,CAACS,KAAtC,GACIT,WAAW,CAACS,KADhB,GAEI,MAAMV,KAAK,CAACW,GAAN,CAAUC,qCAAV,CAHZ;;AAKA,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA;AAFI,MAGFC,eAAMC,QAAN,GAAiBC,YAHrB;;AAKA,QAAMC,eAAe,GACnBJ,yBAAyB,IACzB,CAACN,uBADD,IAEA;AACCW,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,aAA1B,IACC;AACAR,EAAAA,gBANJ,CA/B0D,CAuC1D;AACA;AACA;;AACA,MAAIK,eAAJ,EAAqB;AACnB,UAAM,yCAAN;AACD,GAFD,CAIA;AACA;AALA,OAMK,IAAI,CAACA,eAAL,EAAsB;AACzB,YAAM,+BAAyB;AAC7BR,QAAAA,KAAK,EAAEF;AADsB,OAAzB,CAAN;AAGD;;AAED,QAAMD,wBAAN;AAEA;AACA,QAAMT,OAAO,CAACE,KAAR,CAAcsB,GAAd,CAAkBV,qCAAlB,EAA8CP,GAA9C,CAAN;AAEA,QAAM;AAAEkB,IAAAA;AAAF,MAAeR,cAArB;AACAQ,EAAAA,QAAQ,CAACN,YAAT,CAAsBO,mBAAtB,CAA0C,KAA1C;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,oBAAjB;AACD,CA9DD","sourcesContent":["import { Step } from \"./../../utils/run-steps\"\nimport fetchAndApplyNodeUpdates from \"./update-nodes/fetch-node-updates\"\n\nimport { fetchAndCreateAllNodes } from \"./fetch-nodes/fetch-nodes\"\n\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport store from \"~/store\"\nimport fetchAndCreateNonNodeRootFields from \"./create-nodes/fetch-and-create-non-node-root-fields\"\nimport { allowFileDownloaderProgressBarToClear } from \"./create-nodes/create-remote-file-node/progress-bar-promise\"\nimport { sourcePreviews } from \"~/steps/preview\"\n\nconst sourceNodes: Step = async (helpers, pluginOptions) => {\n  const { cache, webhookBody } = helpers\n\n  // if this is a preview we want to process it and return early\n  if (webhookBody.preview) {\n    await sourcePreviews(helpers, pluginOptions)\n\n    return\n  }\n  // if it's not a preview but we have a token\n  // we should source any pending previews then continue sourcing\n  else if (webhookBody.token && webhookBody.userDatabaseId) {\n    await sourcePreviews(helpers, pluginOptions)\n  }\n\n  const now = Date.now()\n\n  // fetch non-node root fields such as settings.\n  // For now, we're refetching them on every build\n  const nonNodeRootFieldsPromise = fetchAndCreateNonNodeRootFields()\n\n  const lastCompletedSourceTime =\n    webhookBody.refreshing && webhookBody.since\n      ? webhookBody.since\n      : await cache.get(LAST_COMPLETED_SOURCE_TIME)\n\n  const {\n    schemaWasChanged,\n    foundUsableHardCachedData,\n  } = store.getState().remoteSchema\n\n  const fetchEverything =\n    foundUsableHardCachedData ||\n    !lastCompletedSourceTime ||\n    // don't refetch everything in development\n    (process.env.NODE_ENV !== `development` &&\n      // and the schema was changed\n      schemaWasChanged)\n\n  // If this is an uncached build,\n  // or our initial build to fetch and cache everything didn't complete,\n  // pull everything from WPGQL\n  if (fetchEverything) {\n    await fetchAndCreateAllNodes()\n  }\n\n  // If we've already successfully pulled everything from WPGraphQL\n  // just pull the latest changes\n  else if (!fetchEverything) {\n    await fetchAndApplyNodeUpdates({\n      since: lastCompletedSourceTime,\n    })\n  }\n\n  await nonNodeRootFieldsPromise\n\n  allowFileDownloaderProgressBarToClear()\n  await helpers.cache.set(LAST_COMPLETED_SOURCE_TIME, now)\n\n  const { dispatch } = store\n  dispatch.remoteSchema.setSchemaWasChanged(false)\n  dispatch.develop.resumeRefreshPolling()\n}\n\nexport { sourceNodes }\n"],"file":"index.js"}