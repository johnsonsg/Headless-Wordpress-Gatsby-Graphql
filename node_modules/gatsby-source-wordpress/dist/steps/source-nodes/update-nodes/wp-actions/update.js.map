{"version":3,"sources":["../../../../../src/steps/source-nodes/update-nodes/wp-actions/update.js"],"names":["fetchAndCreateSingleNode","singleName","id","actionType","cachedNodeIds","isDraft","token","isPreview","userDatabaseId","getNodeQuery","nodeQuery","previewQuery","query","helpers","reporter","pluginOptions","info","node","headers","WPGatsbyPreview","WPGatsbyPreviewUser","data","variables","errorContext","remoteNode","warn","uri","normalizeUri","additionalNodeIds","createSingleNode","debug","preview","state","store","getState","gatsbyApi","wpUrl","remoteSchema","typeInfo","key","CREATED_NODE_IDS","updatedNodeContent","nodeType","nodesTypeName","type","processedNode","actions","createContentDigest","parent","internal","contentDigest","typeSettings","name","cancelUpdate","beforeChangeNode","receivedAdditionalNodeIds","receivedRemoteNode","receivedCancelUpdate","fetchGraphql","buildTypeName","wpStore","createNode","push","length","forEach","value","wpActionUPDATE","wpAction","reportUpdate","setAction","log","chalk","bold","toLowerCase","referencedNodeSingularName","title","referencedNodeID","verbose","getNode","nodeId","referencedNodeGlobalRelayID","existingNode","referencedNodeStatus","validNodeIds","filter","cachedId","touchNode","deleteNode","nodeEntries","Object","entries","loggableEntries","includes","italic","getDbIdFromRelayId","relayId","split","reverse","replace","endsWith","slice","startsWith","dbId"],"mappings":"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","sourcesContent":["import fetchGraphql from \"~/utils/fetch-graphql\"\nimport store from \"~/store\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport chalk from \"chalk\"\nimport { getQueryInfoBySingleFieldName } from \"../../helpers\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { CREATED_NODE_IDS } from \"~/constants\"\nimport { dump } from \"dumper.js\"\nimport { atob } from \"atob\"\n\nimport {\n  buildTypeName,\n  getTypeSettingsByType,\n} from \"~/steps/create-schema-customization/helpers\"\nimport { processNode } from \"~/steps/source-nodes/create-nodes/process-node\"\nimport { getPersistentCache, setPersistentCache } from \"~/utils/cache\"\n\nexport const fetchAndCreateSingleNode = async ({\n  singleName,\n  id,\n  actionType,\n  cachedNodeIds,\n  isDraft,\n  token = null,\n  isPreview = false,\n  userDatabaseId = null,\n}) => {\n  function getNodeQuery() {\n    const { nodeQuery, previewQuery } =\n      getQueryInfoBySingleFieldName(singleName) || {}\n\n    // if this is a preview use the preview query\n    // if it's a preview but it's the initial blank node\n    // then use the regular node query as the preview query wont\n    // return anything\n    const query = isPreview && !isDraft ? previewQuery : nodeQuery\n\n    return query\n  }\n\n  const query = getNodeQuery()\n\n  const {\n    helpers: { reporter },\n    pluginOptions,\n  } = getGatsbyApi()\n\n  if (!query) {\n    reporter.info(\n      formatLogMessage(\n        `A ${singleName} was updated, but no query was found for this node type. This node type is either excluded in plugin options or this is a bug.`\n      )\n    )\n    return { node: null }\n  }\n\n  const headers =\n    token && userDatabaseId\n      ? {\n          WPGatsbyPreview: token,\n          WPGatsbyPreviewUser: userDatabaseId,\n        }\n      : {}\n\n  const { data } = await fetchGraphql({\n    headers,\n    query,\n    variables: {\n      id,\n    },\n    errorContext: `Error occurred while updating a single \"${singleName}\" node.`,\n  })\n\n  const remoteNode = data[singleName]\n\n  if (!data || !remoteNode) {\n    reporter.warn(\n      formatLogMessage(\n        `${id} ${singleName} was updated, but no data was returned for this node.`\n      )\n    )\n\n    return { node: null }\n  }\n\n  remoteNode.uri = normalizeUri({\n    uri: remoteNode.uri,\n    singleName,\n    id,\n  })\n\n  data[singleName] = remoteNode\n\n  const { additionalNodeIds, node } = await createSingleNode({\n    singleName,\n    id,\n    actionType,\n    data,\n    cachedNodeIds,\n  })\n\n  if (isPreview) {\n    reporter.info(\n      formatLogMessage(`Preview for ${singleName} ${node.id} was updated.`)\n    )\n\n    if (pluginOptions.debug.preview) {\n      reporter.info(formatLogMessage(`Raw remote node data:`))\n      dump(data)\n    }\n  }\n\n  return { node, additionalNodeIds }\n}\n\nexport const createSingleNode = async ({\n  singleName,\n  id,\n  actionType,\n  data,\n  cachedNodeIds,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n  const { wpUrl } = state.remoteSchema\n\n  const { typeInfo } = getQueryInfoBySingleFieldName(singleName)\n\n  if (!cachedNodeIds) {\n    cachedNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n  }\n\n  const updatedNodeContent = {\n    ...data[singleName],\n    nodeType: typeInfo.nodesTypeName,\n    type: typeInfo.nodesTypeName,\n  }\n\n  const processedNode = await processNode({\n    node: updatedNodeContent,\n    pluginOptions,\n    wpUrl,\n    helpers,\n  })\n\n  const { actions } = helpers\n\n  const { createContentDigest } = helpers\n\n  let remoteNode = {\n    ...processedNode,\n    id: id,\n    parent: null,\n    internal: {\n      contentDigest: createContentDigest(updatedNodeContent),\n      type: buildTypeName(typeInfo.nodesTypeName),\n    },\n  }\n\n  const typeSettings = getTypeSettingsByType({\n    name: typeInfo.nodesTypeName,\n  })\n\n  let additionalNodeIds\n  let cancelUpdate\n\n  if (\n    typeSettings.beforeChangeNode &&\n    typeof typeSettings.beforeChangeNode === `function`\n  ) {\n    const {\n      additionalNodeIds: receivedAdditionalNodeIds,\n      remoteNode: receivedRemoteNode,\n      cancelUpdate: receivedCancelUpdate,\n    } =\n      (await typeSettings.beforeChangeNode({\n        actionType: actionType,\n        remoteNode,\n        actions,\n        helpers,\n        fetchGraphql,\n        typeSettings,\n        buildTypeName,\n        type: typeInfo.nodesTypeName,\n        wpStore: store,\n      })) || {}\n\n    additionalNodeIds = receivedAdditionalNodeIds\n    cancelUpdate = receivedCancelUpdate\n\n    if (receivedRemoteNode) {\n      remoteNode = receivedRemoteNode\n    }\n  }\n\n  if (cancelUpdate) {\n    return {\n      additionalNodeIds,\n      remoteNode: null,\n    }\n  }\n\n  if (remoteNode) {\n    actions.createNode(remoteNode)\n\n    cachedNodeIds.push(remoteNode.id)\n\n    if (additionalNodeIds && additionalNodeIds.length) {\n      additionalNodeIds.forEach(id => cachedNodeIds.push(id))\n    }\n\n    await setPersistentCache({ key: CREATED_NODE_IDS, value: cachedNodeIds })\n  }\n\n  return { additionalNodeIds, node: remoteNode }\n}\n\nconst wpActionUPDATE = async ({ helpers, wpAction }) => {\n  const reportUpdate = ({ setAction } = {}) => {\n    const actionType = setAction || wpAction.actionType\n\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        `${chalk.bold(\n          `${actionType.toLowerCase()} ${wpAction.referencedNodeSingularName}`\n        )} ${wpAction.title} (#${wpAction.referencedNodeID})`\n      )\n    )\n    reporter.log(``)\n  }\n\n  const { reporter, actions } = helpers\n\n  const cachedNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n\n  const state = store.getState()\n  const {\n    gatsbyApi: {\n      pluginOptions: { verbose },\n      helpers: { getNode },\n    },\n  } = state\n\n  const nodeId = wpAction.referencedNodeGlobalRelayID\n\n  const existingNode = await getNode(nodeId)\n\n  if (wpAction.referencedNodeStatus !== `publish`) {\n    // if the post status isn't publish anymore, we need to remove the node\n    // by removing it from cached nodes so it's garbage collected by Gatsby\n    const validNodeIds = cachedNodeIds.filter(cachedId => cachedId !== nodeId)\n\n    await setPersistentCache({ key: CREATED_NODE_IDS, value: validNodeIds })\n\n    if (existingNode) {\n      await actions.touchNode({ nodeId })\n      await actions.deleteNode({ node: existingNode })\n      reportUpdate({ setAction: `DELETE` })\n    }\n\n    return\n  }\n\n  const { node } = await fetchAndCreateSingleNode({\n    id: nodeId,\n    actionType: wpAction.actionType,\n    singleName: wpAction.referencedNodeSingularName,\n    cachedNodeIds,\n  })\n\n  if (node) {\n    reportUpdate()\n\n    if (verbose) {\n      const nodeEntries = existingNode ? Object.entries(existingNode) : null\n\n      if (nodeEntries?.length) {\n        const loggableEntries = nodeEntries.filter(\n          ([key]) => !key.includes(`modifiedGmt`) && key !== `modified`\n        )\n\n        for (const [key, value] of loggableEntries) {\n          if (!node || !node[key] || !value) {\n            return\n          }\n\n          if (\n            // if the value of this field changed, log it\n            typeof node[key] === `string` &&\n            value !== node[key]\n          ) {\n            reporter.log(``)\n            reporter.info(chalk.bold(`${key} changed`))\n\n            if (value.length < 250 && node[key].length < 250) {\n              reporter.log(``)\n              reporter.log(`${chalk.italic.bold(`    from`)}`)\n              reporter.log(`      ${value}`)\n              reporter.log(chalk.italic.bold(`    to`))\n              reporter.log(`      ${node[key]}`)\n              reporter.log(``)\n            }\n          }\n        }\n\n        reporter.log(``)\n      }\n    }\n  }\n\n  // return cachedNodeIds\n}\n\nconst getDbIdFromRelayId = relayId => atob(relayId).split(`:`).reverse()[0]\n\nconst normalizeUri = ({ uri, id, singleName }) => {\n  // remove the preview query params as they're not relevant in Gatsby\n  uri = uri?.replace(`preview=true`, ``)\n\n  // if removing the preview string leaves us with either of these\n  // characters at the end, trim em off!\n  if (uri?.endsWith(`?`) || uri?.endsWith(`&`)) {\n    uri = uri.slice(0, -1)\n  }\n\n  // if this is a draft url which could look like\n  // this /?p=543534 or /?page=4324 or /?something=yep&page=543543 or /?p=4534&what=yes\n  // we will create a proper path that Gatsby can handle\n  // /post_graphql_name/post_db_id/\n  // this same logic is on the WP side in the preview template\n  // to account for this situation.\n  if (uri?.startsWith(`/?`)) {\n    const dbId = getDbIdFromRelayId(id)\n\n    return `/generated-preview-path/${singleName}/${dbId}/`\n  }\n\n  return uri\n}\n\nexport default wpActionUPDATE\n"],"file":"update.js"}